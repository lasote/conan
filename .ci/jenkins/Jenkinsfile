// ########## CONFIGURATION ##################
def full_py_vers = false
def test_v2 = false
// ############################


if (env.BRANCH_NAME =~ /(^release.*)|(^master)/) {
    full_py_vers = true
}

def slaves = ['Linux', 'Windows', 'Macos']
def flavors = ["no_revisions"]


def pyvers  = ['py36', 'py27']
def api_confs = ["v1"]

if (full_py_vers){
    pyvers = ['py36', 'py34', 'py27']
    api_confs = ["v1", "v2"]
}
else if(test_v2){
    api_confs = ["v1", "v2"]
}


def module = "\"conans.test\""
def numcores = "--num_cores=3"

def win_tmp_base = "D:/J/t/"
def rest_tmp_base = "/tmp/"
def runner = ".ci/jenkins/runner.py"

def commit
def branch

try{
    for (flavor in flavors){
        def builders = [:]
        for (x in slaves) {
            def slave = x
            for (y in pyvers) {
                for (z in api_confs){
                    def pyver = y
                    def api_conf = z
                    def name = "${slave} - ${flavor} - ${pyver} - API${api_conf}"

                    if (api_conf == "v2" && slave != "Linux"){
                        continue;
                    }

                    if (flavor == "revisions" && api_conf == "v1"){
                        continue;
                    }

                    if (flavor == "revisions" && pyver == "py34"){
                        continue;
                    }

                    builders[name] = {
                        node(slave) {
                            stage(name){
                                def workdir
                                def sourcedir
                                def base_source
                                lock('source_code') { // Prepare a clean new directory with the sources
                                    try{
                                        step ([$class: 'WsCleanup'])
                                    }
                                    catch(e){
                                        echo "Cannot clean WS"
                                    }

                                    def vars = checkout scm
                                    commit = vars["GIT_COMMIT"].substring(0, 4)
                                    branch = vars["GIT_BRANCH"]
                                    def base_dir = (slave == "Windows") ? win_tmp_base : rest_tmp_base
                                    workdir = "${base_dir}${commit}/${pyver}/${api_conf}"
                                    base_source = "${base_dir}source/${commit}"
                                    sourcedir = "${base_source}/${pyver}/${api_conf}"
                                    while(fileExists(sourcedir)){
                                        sourcedir = sourcedir + "_"
                                    }

                                    dir(base_source){ // Trick to create the parent
                                        def escaped_ws = "${WORKSPACE}".replace("\\", "/")
                                        def cmd = "python -c \"import shutil; shutil.copytree('${escaped_ws}', '${sourcedir}')\""
                                        if (slave == "Windows"){
                                            bat(script: cmd)
                                        }
                                        else{
                                            sh(script: cmd)
                                        }
                                    }
                                }
                                if(slave == "Linux"){
                                    sh "docker pull lasote/conantests"
                                    docker.image('lasote/conantests').inside("-e CONAN_USER_HOME=${sourcedir} -v${sourcedir}:${sourcedir}") {
                                        sh(script: "python ${runner} ${module} ${pyver} ${sourcedir} ${workdir} -e rest_api ${numcores}  --server_api=${api_conf} -f ${flavor}")
                                    }
                                }
                                else if(slave == "Windows"){
                                    try{

                                      withEnv(["CONAN_TEST_FOLDER=${workdir}"]){
                                        bat(script: "python ${runner} ${module} ${pyver} ${sourcedir} \"${workdir}\" -e rest_api -e windows_ci_excluded ${numcores} --server_api=${api_conf} -f ${flavor}")
                                      }
                                    }
                                    finally{
                                      bat(script: "rd /s /q \"${workdir}\"")
                                      bat(script: "rd /s /q \"${sourcedir}\"")
                                    }
                                }
                                else if(slave == "Macos"){
                                    try{
                                      withEnv(['PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin']) {
                                          sh(script: "python ${runner} ${module} ${pyver} ${sourcedir} ${workdir} -e rest_api ${numcores} --server_api=${api_conf} -f ${flavor}")
                                      }
                                    }
                                    finally{
                                      sh(script: "rm -rf ${workdir}")
                                      sh(script: "rm -rf ${sourcedir}")
                                    }
                                }
                                //step([$class: 'JUnitResultArchiver', testResults: '**/nosetests.xml'])
                            }
                        }
                    }
                }
            }
        }
        parallel builders
    }




    // Run rest_api_test without concurrency between same node
    pyvers = ['py36']
    for (y in pyvers) {
        builders = [:]
        def pyver = y
        builders["Windows Rest API Test"] = {
            node("Windows"){
                stage("REST tests Windows ${pyver}"){
                    try{
                      bat(script: "python ${runner} conans.test.remote.rest_api_test ${pyver} ${WORKSPACE} \"${win_tmp_base}${commit}\"")
                    }
                    finally{
                      bat(script: "rd /s /q \"${win_tmp_base}${commit}\"")
                    }
                }
            }
        }
        builders["Linux Rest API Test"] = {
            node("Linux"){
                stage("REST tests Linux ${pyver}"){
                    docker.image('lasote/conantests').inside("-e CONAN_USER_HOME=${WORKSPACE}") {
                        sh(script: "python ${runner} conans.test.remote.rest_api_test ${pyver} ${WORKSPACE} /tmp/${commit}")
                    }
                }
            }
        }
        /*builders["Mac Rest API Test"] = {
            node("Macos"){
                stage("REST tests Windows ${pyver}"){
                    withEnv(['PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin']) {
                        sh(script: "tox --workdir /tmp/${commit} -e ${pyver} -- -x conans.test.remote.rest_api_test")
                    }
                }
            }
        }*/ // EXTREMELY SLOW, INVESTIGATE
        parallel builders
    }
}
catch(e){
    if(env.JOB_NAME == "ConanNightly"){
        def subject = "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        def summary = "${subject} (${env.BUILD_URL}), Branch: ${branch}"
        slackSend (color: '#FF0000', message: summary)
    }
    throw e
}

if(env.JOB_NAME == "ConanNightly"){
    def subject = "SUCCESS ${env.JOB_NAME}! Another day with a green ${branch}!"
    def summary = "${subject} (${env.BUILD_URL})"
    slackSend (color: '#00FF00', message: summary)
}


def build_linux(){
    sh "docker pull lasote/conantests"
    docker.image('lasote/conantests').inside("-e CONAN_USER_HOME=${sourcedir} -v${sourcedir}:${sourcedir}") {
        sh(script: "python ${runner} ${module} ${pyver} ${sourcedir} ${workdir} -e rest_api ${numcores}  --server_api=${api_conf}")
    }
}
